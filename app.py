from flask import Flask
from flask_jwt import JWT
from flask_restful import Api
from resources.item import Item, ItemList
from resources.user import UserRegister
from security import authenticate, identity
from resources.store import Store, StoreList

'''
Token based authentication overview

User enters their login credentials

Server verifies the credentials are correct and returns a signed token

This token is stored client-side, most commonly in local storage - but can be stored in session 
storage or a cookie as well

Subsequent requests to the server include this token as an additional Authorization header or 
through one of the other methods mentioned above

The server decodes the JWT and if the token is valid processes the request

Once a user logs out, the token is destroyed client-side, no interaction with the server is 
necessary
'''

app = Flask(__name__)
# turn off the flask_sqlalchemy modification tracker
# tell sqlalchemy what database to use and where is the database situated
app.config['SQLALCHEMY_DATABASE_URI'] = "sqlite:///data.db"
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
# define a secret key
# JWTs are generated by signing user information via a secret key, which are then securely stored on the client.
app.secret_key = "121efg987"
# create an API for the Flask app
api = Api(app)
# create a database before flask starts accepting requests
@app.before_first_request
def create_tables():
    db.create_all()
# create a JWT token
jwt = JWT(app, authenticate, identity)  # /auth
# make the resource accessible via the api
api.add_resource(Item, "/item/<string:name>")
api.add_resource(ItemList, "/items")
api.add_resource(UserRegister, "/register")
api.add_resource(Store, "/store/<string:name>")
api.add_resource(StoreList, "/stores")

if __name__ == "__main__":
    from db import db
    # enable sqlalchemy to use the flask app
    db.init_app(app)
    app.run(port=5000, debug=True)

